import csv
import sys
import logging
import time
from datetime import datetime as dt
import serial
import numpy as np
from PyQt5.QtCore import Qt, QThread, pyqtSignal, pyqtSlot, QModelIndex, QObject, QTimer
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog
from PyQt5.QtGui import QIcon
import pyqtgraph as pg
from pyqtgraph import PlotWidget
from PyQt5.QtSerialPort import QSerialPort, QSerialPortInfo
import random
logging.basicConfig(format="%(message)s", level=logging.INFO)
from pyqtgraph import AxisItem

from mainwindow import Ui_MainWindow

class DateAxisItem(AxisItem):
    def __init__(self, *args, **kwargs):
        AxisItem.__init__(self, *args, **kwargs)

    def tickStrings(self, values, scale, spacing):
        return [dt.fromtimestamp(value).strftime("%H:%M:%S") for value in values]


class Worker(QThread):
    result = pyqtSignal(str, tuple)

    def __init__(self, port):
        super().__init__()
        self.is_running = True
        logging.info("Serial Start")

    def run(self):
        temp = []
        while self.is_running:
            for i in range(8):
                temp.append(random.random())
            temperatures = tuple(temp)
            current_time = str(dt.now().strftime('%H:%M:%S'))
            self.result.emit(current_time, temperatures)

    def stop(self):
        print("Stopping Serial")
        self.is_running = False
        self.quit()
        self.wait()


def hex_dec(T_hex):
    try:
        T_val = int(T_hex, 16)
        T_max = 18000
        hex_max = 0xFFFF
        if T_val > T_max:
            T = -(hex_max - T_val + 1) / 10
        else:
            T = T_val / 10
        return T
    except ValueError:
        return 'err'


def parse_temp(response):
    response_hex = response.hex()
    temperatures = []
    for i in range(8):
        hex_str = response_hex[34+i*4:36+i*4] + response_hex[32+i*4:34+i*4]
        temperatures.append(hex_dec(hex_str))
    return tuple(temperatures)


class PurifierModel(QObject):
    def __init__(self, parent=None):
        super(PurifierModel, self).__init__(parent)
        self.data = []

    def lenData(self, parent=QModelIndex()):
        return len(self.data)

    def appendData(self, time, *temps):
        self.data.append((time,) + temps)
        self.dataChanged.emit()

    def clearData(self):
        self.data = []
        self.dataChanged.emit()

    def data(self, index, role=Qt.DisplayRole):
        if role == Qt.DisplayRole:
            row = index.row()
            return self.data[row]

    def reset(self):
        self.data = []
        return None

    dataChanged = pyqtSignal()


class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.worker = None
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        self.ui.startStopButton.pressed.connect(self.toggleRun)
        self.ui.clearButton.pressed.connect(self.clearPlot)
        self.ui.LogButton.pressed.connect(self.startLogging)
        self.ui.ConnectButton.pressed.connect(self.applySerialPort)
        self.ui.refreshButton.pressed.connect(self.refreshSerialPorts)
        self.ui.saveDirectoryButton.pressed.connect(self.chooseSaveDirectory)

        self.model = PurifierModel()
        self.initGraph()

        self.filename = None
        self.serialPort = None
        self.saveDirectory = None

    def initFile(self):
        now = dt.now()
        self.filename = "temp_log_" + str(now.strftime('%Y%m%d%H%M')) + ".csv"
        with open(f"{self.saveDirectory}/{self.filename}", 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['Time', 'T1', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'T8'])

    def initGraph(self):
        self.ui.graphWidget.setBackground("w")
        styles = {"color": "red", "font-size": "18px"}
        self.ui.graphWidget.setLabel("left", "Temperature (Â°C)", **styles)
        self.ui.graphWidget.setLabel("bottom", "Time", **styles)
        
        self.ui.graphWidget.getAxis('bottom').setStyle(tickTextOffset=10)
        self.ui.graphWidget.setAxisItems({'bottom': DateAxisItem(orientation='bottom')})

        self.time = []
        self.data = [[] for _ in range(8)]
        self.plotLines = []

        self.colors = [(183, 101, 224), (93, 131, 212), (49, 205, 222), (36, 214, 75), (214, 125, 36) ,(230, 78, 192), (209, 84, 65), (0, 184, 245)]
        for i in range(8):
            plot_line = self.ui.graphWidget.plot(self.time, self.data[i], pen=pg.mkPen(color=self.colors[i], width=2))
            self.plotLines.append(plot_line)

    def toggleRun(self):
        if self.worker is not None:
            self.stopRun()
        else:
            self.startRun()

    def startRun(self):
        self.worker = Worker(self.serialPort)
        self.worker.result.connect(self.updateData)
        self.worker.start()
        print("Start serial")

    def stopRun(self):
        if self.worker:
            self.worker.stop()
            self.worker = None

    def clearPlot(self):
        self.time = []
        self.data = [[] for _ in range(8)]
        for i in range(8):
            self.plotLines[i].setData(self.time, self.data[i])

    def startLogging(self):
        self.initFile()
        self.ui.fileLabel.setText(f"{self.saveDirectory}/{self.filename}")

    def applySerialPort(self):
        self.serialPort = "/dev/"+self.ui.ComboBox_1.currentText()
        print(f"Connected to: {self.serialPort}")

    def refreshSerialPorts(self):
        self.ui.ComboBox_1.clear()
        ports = QSerialPortInfo.availablePorts()
        for port in ports:
            self.ui.ComboBox_1.addItem(port.portName())

    def chooseSaveDirectory(self):
        self.saveDirectory = QFileDialog.getExistingDirectory(self, "Save Directory")
        if self.saveDirectory:
            self.ui.fileLabel.setText(f"{self.saveDirectory}")

    @pyqtSlot(str, tuple)
    def updateData(self, current_time, temperatures):
        for i in range(8):
            if self.ui.checkboxes[i].isChecked():
                if temperatures[i] != 'err':
                    self.ui.labels[i].setText(f"T{i + 1}: {temperatures[i]:.1f}")
                else:
                    self.ui.labels[i].setText(f"T{i + 1}: {temperatures[i]}")
            else:
                self.ui.labels[i].setText(f"T{i + 1}: --")

        active_ch = tuple(temperatures[i] if self.ui.checkboxes[i].isChecked() else np.nan for i in range(8))
        self.model.appendData(current_time, *active_ch)

        formattime = dt.strptime(current_time, '%H:%M:%S').timestamp()
        self.time.append(formattime)
        print(self.time)

        for i in range(8):
            if self.ui.checkboxes[i].isChecked():
                self.data[i].append(temperatures[i])
                self.plotLines[i].setData(np.array(self.time), self.data[i])
            else:
                self.data[i].append(temperatures[i])

        if self.filename:
            self.LogData(current_time, temperatures)

    def LogData(self, timestamp, temperatures):
        with open(self.filename, 'a', newline='') as file:
            writer = csv.writer(file)
            writer.writerow([timestamp] + list(temperatures))


app = QApplication(sys.argv)
window = MainWindow()
window.show()
sys.exit(app.exec_())
